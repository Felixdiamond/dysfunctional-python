#!/usr/bin/env python3
import sys
import ast
import random
import time
from io import StringIO

def obfuscate_code(code):
    tree = ast.parse(code)
    for node in ast.walk(tree):
        if isinstance(node, ast.Name):
            node.id = ''.join(random.sample(node.id, len(node.id)))
    return ast.unparse(tree)

def safe_eval(code, filename="<string>"):
    try:
        tree = ast.parse(code, filename=filename)
        for node in ast.walk(tree):
            if isinstance(node, (ast.Import, ast.ImportFrom)):
                raise ValueError("Imports are not allowed for safety reasons.")
        
        old_stdout = sys.stdout
        sys.stdout = StringIO()
        
        exec(code, {})
        
        output = sys.stdout.getvalue().strip()
        sys.stdout = old_stdout
        
        return output
    except Exception as e:
        return f"Error: {str(e)}"

def partial_reveal(guess, actual):
    revealed = ""
    for g, a in zip(guess, actual):
        if g == a:
            revealed += g
        else:
            revealed += "_"
    return revealed + "_" * (len(actual) - len(guess))

def calculate_score(attempts, time_taken, code_complexity):
    base_score = 1000
    attempt_penalty = 50 * (attempts - 1)
    time_penalty = int(time_taken) * 10
    complexity_bonus = code_complexity * 20
    return max(0, base_score - attempt_penalty - time_penalty + complexity_bonus)

def run_dysfunctional_python(filename):
    with open(filename, 'r') as file:
        original_code = file.read()
    
    obfuscated_code = obfuscate_code(original_code)
    print("Here's your obfuscated code:")
    print(obfuscated_code)
    
    actual_output = safe_eval(original_code, filename)
    attempts = 0
    start_time = time.time()
    code_complexity = len(ast.parse(original_code).body)
    
    while True:
        user_guess = input("Guess the output of your code: ")
        attempts += 1
        
        if user_guess == actual_output:
            end_time = time.time()
            time_taken = end_time - start_time
            score = calculate_score(attempts, time_taken, code_complexity)
            print(f"Correct guess after {attempts} attempts!")
            print(f"Time taken: {time_taken:.2f} seconds")
            print(f"Your score: {score}")
            print("Here's the output:")
            print(actual_output)
            break
        else:
            print("Wrong guess. Here's a partial revelation:")
            print(partial_reveal(user_guess, actual_output))
            print("Try again!")

def main():
    if len(sys.argv) != 2:
        print("Usage: dyspython <script.py>")
        sys.exit(1)
    
    script_file = sys.argv[1]
    run_dysfunctional_python(script_file)

if __name__ == "__main__":
    main()